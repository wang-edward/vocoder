
/*
    This file was auto-generated by the cmaj VScode extension!
    https://cmajor.dev
*/

// Here's a very simple graph that plays a sine-wave to get you started..
graph simple  [[ main ]]
{
    // Our processor has a single floating point output stream:
    // input filter.frequency;
    // input filter.q;

    input stream float<2> in;
    // input stream float source;
    output stream float<2> out;

    // we'll create a sinewave generator node, using the standard library:
    node {
      sineC = std::oscillators::Sine (float, 262 * 3);
      sineE = std::oscillators::Sine (float, 330 * 3);
      sineG = std::oscillators::Sine (float, 392 * 3);
      midwayMix = std::mixers::ConstantSum(float);
      source = std::mixers::ConstantSum(float);
      srcfilter1 = std::filters (float)::tpt::svf::Processor(0, 100);
      srcfilter2 = std::filters (float)::tpt::svf::Processor(2, 143);
      srcfilter3 = std::filters (float)::tpt::svf::Processor(2, 203);
      srcfilter4 = std::filters (float)::tpt::svf::Processor(2, 289);
      srcfilter5 = std::filters (float)::tpt::svf::Processor(2, 412);
      srcfilter6 = std::filters (float)::tpt::svf::Processor(2, 488);
      srcfilter7 = std::filters (float)::tpt::svf::Processor(2, 838);
      srcfilter8 = std::filters (float)::tpt::svf::Processor(2, 1194);
      srcfilter9 = std::filters (float)::tpt::svf::Processor(2, 1701);
      srcfilter10 = std::filters (float)::tpt::svf::Processor(2, 2424);
      srcfilter11 = std::filters (float)::tpt::svf::Processor(2, 3455);
      srcfilter12 = std::filters (float)::tpt::svf::Processor(2, 4924);
      srcfilter13 = std::filters (float)::tpt::svf::Processor(2, 7017);
      srcfilter14 = std::filters (float)::tpt::svf::Processor(1, 10000);

      infilter1 = std::filters (float<2>)::tpt::svf::Processor(0, 100);
      infilter2 = std::filters (float<2>)::tpt::svf::Processor(2, 143);
      infilter3 = std::filters (float<2>)::tpt::svf::Processor(2, 203);
      infilter4 = std::filters (float<2>)::tpt::svf::Processor(2, 289);
      infilter5 = std::filters (float<2>)::tpt::svf::Processor(2, 412);
      infilter6 = std::filters (float<2>)::tpt::svf::Processor(2, 488);
      infilter7 = std::filters (float<2>)::tpt::svf::Processor(2, 838);
      infilter8 = std::filters (float<2>)::tpt::svf::Processor(2, 1194);
      infilter9 = std::filters (float<2>)::tpt::svf::Processor(2, 1701);
      infilter10 = std::filters (float<2>)::tpt::svf::Processor(2, 2424);
      infilter11 = std::filters (float<2>)::tpt::svf::Processor(2, 3455);
      infilter12 = std::filters (float<2>)::tpt::svf::Processor(2, 4924);
      infilter13 = std::filters (float<2>)::tpt::svf::Processor(2, 7017);
      infilter14 = std::filters (float<2>)::tpt::svf::Processor(1, 10000);

      mod1 = std::levels::DynamicGain(float<2>);
      mod2 = std::levels::DynamicGain(float<2>);
      mod3 = std::levels::DynamicGain(float<2>);
      mod4 = std::levels::DynamicGain(float<2>);
      mod5 = std::levels::DynamicGain(float<2>);
      mod6 = std::levels::DynamicGain(float<2>);
      mod7 = std::levels::DynamicGain(float<2>);
      mod8 = std::levels::DynamicGain(float<2>);
      mod9 = std::levels::DynamicGain(float<2>);
      mod10 = std::levels::DynamicGain(float<2>);
      mod11 = std::levels::DynamicGain(float<2>);
      mod12 = std::levels::DynamicGain(float<2>);
      mod13 = std::levels::DynamicGain(float<2>);
      mod14 = std::levels::DynamicGain(float<2>);

      // filter = std::filters (float<2>)::tpt::svf::Processor();
    }
    // and we'll connect the sinewave to our output stream via a fixed
    // gain processor, which will reduce its level to be less annoying:
    connection
    {
      sineC -> midwayMix.in1;
      sineE -> midwayMix.in2;
      midwayMix.out -> source.in1;
      sineG -> source.in2;
      source -> srcfilter1.in;
      source -> srcfilter2.in;
      source -> srcfilter3.in;
      source -> srcfilter4.in;
      source -> srcfilter5.in;
      source -> srcfilter6.in;
      source -> srcfilter7.in;
      source -> srcfilter8.in;
      source -> srcfilter9.in;
      source -> srcfilter10.in;
      source -> srcfilter11.in;
      source -> srcfilter12.in;
      source -> srcfilter13.in;
      source -> srcfilter14.in;

      srcfilter1.out -> mod1.gain;
      srcfilter2.out -> mod2.gain;
      srcfilter3.out -> mod3.gain;
      srcfilter4.out -> mod4.gain;
      srcfilter5.out -> mod5.gain;
      srcfilter6.out -> mod6.gain;
      srcfilter7.out -> mod7.gain;
      srcfilter8.out -> mod8.gain;
      srcfilter9.out -> mod9.gain;
      srcfilter10.out -> mod10.gain;
      srcfilter11.out -> mod11.gain;
      srcfilter12.out -> mod12.gain;
      srcfilter13.out -> mod13.gain;
      srcfilter14.out -> mod14.gain;

      in -> infilter1.in;
      in -> infilter2.in;
      in -> infilter3.in;
      in -> infilter4.in;
      in -> infilter5.in;
      in -> infilter6.in;
      in -> infilter7.in;
      in -> infilter8.in;
      in -> infilter9.in;
      in -> infilter10.in;
      in -> infilter11.in;
      in -> infilter12.in;
      in -> infilter13.in;
      in -> infilter14.in;

      infilter1.out -> mod1.in;
      infilter2.out -> mod2.in;
      infilter3.out -> mod3.in;
      infilter4.out -> mod4.in;
      infilter5.out -> mod5.in;
      infilter6.out -> mod6.in;
      infilter7.out -> mod7.in;
      infilter8.out -> mod8.in;
      infilter9.out -> mod9.in;
      infilter10.out -> mod10.in;
      infilter11.out -> mod11.in;
      infilter12.out -> mod12.in;
      infilter13.out -> mod13.in;
      infilter14.out -> mod14.in;

      mod1.out -> out;
      mod2.out -> out;
      mod3.out -> out;
      mod4.out -> out;
      mod5.out -> out;
      mod6.out -> out;
      mod7.out -> out;
      mod8.out -> out;
      mod9.out -> out;
      mod10.out -> out;
      mod11.out -> out;
      mod12.out -> out;
      mod13.out -> out;
      mod14.out -> out;
    }
}

graph MyFilter {
  input  stream  float<2> in;
  output  stream  float<2> out;
}

